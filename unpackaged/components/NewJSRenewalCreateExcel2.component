<apex:component >

<apex:attribute name="contract" description="Contract Object" type="ContractInfo__c" required="true"/>
<apex:attribute name="IsPersonal" description="Is Personal Contract?" type="Boolean" required="true"/>
<apex:attribute name="isEnglish" description="English Language" type="Boolean" required="true"/>
<apex:attribute name="Member" description="Member Object, for personal contract" type="MemberInfo__c" required="true"/>
<apex:attribute name="MankiDateN" description="Next Manki Date" type="date" required="true" />
<apex:attribute name="KeitaiCdMap" description="KeitaiCdMap" type="map" required="true" />

<apex:attribute name="data" description="Data" type="CustomerData" required="true"/>
<apex:attribute name="templateSelectListId" description="Template SelectList Id" type="string" required="true" />

<script>
  
  var HERADER_TITLE = new Array(
    "No", 
    "契約地区", 
    "WB管轄地区", 
    "（勤務先）会社名称", 
    "（勤務先）住所", 
    "（勤務先）TEL",
    "（勤務先）FAX",
    "（勤務先）総経理", 
    "（勤務先）担当者",
    "（勤務先）部署",
    "（勤務先）役職",
    "（勤務先）実務担当",
    "（勤務先）実務担当部署",
    "（勤務先）実務担当役職",
    "（勤務先）WB営業担当者",
    "（勤務先）WB内務担当者",
    "（契約先）会社名称",
    "（契約先）住所",
    "（契約先）TEL",
    "（契約先）FAX",
    "（契約先）総経理",
    "（契約先）担当者",
    "（契約先）部署",
    "（契約先）役職",
    "（契約先）実務担当",
    "（契約先）実務担当部署",
    "（契約先）実務担当役職",
    "（契約先）WB営業担当者",
    "（契約先）WB内務担当者",
    "請求先会社名称",
    "グループ",
    "団体名称"
    );
    
  var DETAIL_TITLE = new Array(
    "No",
    "契約先会社名称",
    "勤務先会社名称",
    "会員番号",
    "会員氏名",
    "商品",
    "契約形態",
    "契約満期日",
    "自宅住所",
    "自宅TEL",
    "携帯番号",
    "保険会社",
    "プラン",
    "取扱",
    "保険満期日",
    "証券入手状況",
    "メールアドレス",
    "配信"
    );
    
  var Ichiroheian_Title = new Array(
    "No",
    "契約会社名称",
    "使用会社名称",
    "登録番号",
    "座席数",
    "所有",
    "(一路)保険終期",
    "(一路)プラン",
    "(強制)保険会社名称",
    "(強制)保険終期",
    "(任意)保険会社名称",
    "(任意)保険終期"
    );

  var BL_Title = new Array(
    "No",
    "契約会社名称",
    "契約者（被保険者）",
    "保険種目",
    "保険会社名称",
    "保険終期"
    );
    
  var Kenshin_Title = new Array(
    "No",
    "勤務先会社名称",
    "会員番号",
    "会員氏名",
    "受診地区",
    "受診日",
    "受診プラン"
    );

  var headers = new Array();
  var members = new Array();
  var ichiroheian = new Array();
  var BL = new Array();
  var Kenshin = new Array();
  var mindex = 1;
  var iindex = 1;
  var bindex = 1;
  var kindex = 1;
  
  <apex:repeat value="{!data.data}" var="a">
    headers[{!a.Index}] = new Object();
    <apex:repeat value="{!a.Values}" var="v">
      headers[{!a.Index}].{!v.Name} = "{!v.Value}";
    </apex:repeat>
  
    <apex:repeat value="{!a.Members}" var="m">
    members[mindex] = new Object();
    members[mindex].no = "{!a.Index}";
    members[mindex].KeiyakuCompanyName = "{!m.CompanyKeiyakuNo__r.KeiyakuCompanyName__r.Name}";
    members[mindex].KinmuCompanyName = "{!m.KinmuCompany__r.Name}"; 
  <apex:outputPanel layout="none" rendered="{!isEnglish}" >
    members[mindex].KeiyakuCompanyName = "{!m.CompanyKeiyakuNo__r.KeiyakuCompanyName__r.CompanyNameEng__c}";
    members[mindex].KinmuCompanyName = "{!m.KinmuCompany__r.CompanyNameEng__c}";
  </apex:outputPanel>        
    members[mindex].MemberNo = "{!m.MemberNo__c}";
    members[mindex].Name = "{!m.Name}";
  <apex:outputPanel layout="none" rendered="{!isEnglish}" >
    members[mindex].Name = "{!m.SeiMeiRoma__c}";
  </apex:outputPanel>       
    //members[mindex].Tanto = "{!IF(m.Tanto__c,'○','')}";
    members[mindex].Commodity = "{!m.Commodity__c}";
    members[mindex].ServiceKeitaiCd = "{!m.ServiceKeitaiCd__c}";//members[mindex].KeiyakuKeitai = "{!m.KeiyakuKeitai__c}";
    members[mindex].MankiDate = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{!m.MankiDate__c}" /></apex:outputText>";
    members[mindex].Address = "{!JSENCODE(m.Address__c)}";
    members[mindex].Tel = "{!m.Tel__c}";
    members[mindex].Mobile = "{!m.Mobile__c}";
    members[mindex].AnshinPlan = "{!m.InsurancePlan__c}";
    members[mindex].OtaName = "{!m.OtaName__c}";
    members[mindex].Toriatsukai = "{!m.OtaAgency__c}";
    //members[mindex].ShokenNo = "{!m.ShokenNo__c}";
    members[mindex].OtaInsuranceShuki = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{!m.OtaInsuranceShuki__c}" /></apex:outputText>";
    members[mindex].OtaRyaku = "{!m.OtaRyaku__c}";
    members[mindex].ShokenGetSituation = "{!m.ShokenGetSituation__c}";
    members[mindex].Email = "{!m.Email__c}";
    members[mindex].MailHaishin = "{!m.MailHaishin__c}";
    mindex++;
    
      <apex:repeat value="{!m.FamilyMembers__r}" var="f">
        members[mindex] = new Object();
        members[mindex].no = "{!a.Index}";
        members[mindex].KeiyakuCompanyName = "{!m.CompanyKeiyakuNo__r.KeiyakuCompanyName__r.Name}";        
        members[mindex].KinmuCompanyName = "{!m.KinmuCompany__r.Name}";   
      <apex:outputPanel layout="none" rendered="{!isEnglish}" >
        members[mindex].KeiyakuCompanyName = "{!m.CompanyKeiyakuNo__r.KeiyakuCompanyName__r.CompanyNameEng__c}";
        members[mindex].KinmuCompanyName = "{!m.KinmuCompany__r.CompanyNameEng__c}";
      </apex:outputPanel>                             
        members[mindex].MemberNo = "{!f.MemberNo__c}";
        members[mindex].Name = "{!f.Name}";       
      <apex:outputPanel layout="none" rendered="{!isEnglish}" >
        members[mindex].Name = "  {!f.SeiMeiRoma__c}";
      </apex:outputPanel>          
        members[mindex].Commodity = "{!f.Commodity__c}";
        members[mindex].KeiyakuKeitai = ""; 
        members[mindex].MankiDate = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{!m.MankiDate__c}" /></apex:outputText>";
        members[mindex].Address = "";
        members[mindex].Tel = "";
        members[mindex].Mobile = "{!f.Mobile__c}";
        members[mindex].AnshinPlan = ""; 
        members[mindex].OtaName = "{!f.OtaName__c}";
        members[mindex].Toriatsukai = "{!f.OtaAgency__c}";
        //members[mindex].ShokenNo = "{!f.ShokenNo__c}";
        members[mindex].OtaInsuranceShuki = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{!f.OtaInsuranceShuki__c}" /></apex:outputText>";
        members[mindex].OtaRyaku = "{!f.OtaRyaku__c}";
        members[mindex].ShokenGetSituation = "{!f.ShokenGetSituation__c}";
        members[mindex].Email = "{!f.Email__c}";
        members[mindex].MailHaishin = "{!f.MailHaishin__c}";
        mindex++;
      </apex:repeat>
    
    </apex:repeat>
    
    <apex:repeat value="{!a.Ichiroheian}" var="i">
    ichiroheian[iindex] = new Object();
    ichiroheian[iindex].no = "{!a.Index}";
    ichiroheian[iindex].KeiyakuCompanyName = "{!i.KeiyakuCompanyName__r.Name}";
    ichiroheian[iindex].ShiyoCompanyName = "{!i.ShiyoCompanyName__r.Name}"; 
  <apex:outputPanel layout="none" rendered="{!isEnglish}" >
    ichiroheian[iindex].KeiyakuCompanyName = "{!i.KeiyakuCompanyName__r.CompanyNameEng__c}";
    ichiroheian[iindex].ShiyoCompanyName = "{!i.ShiyoCompanyName__r.CompanyNameEng__c}";  
  </apex:outputPanel>        
    ichiroheian[iindex].Name = "{!i.Name}";
    ichiroheian[iindex].Seat = {!BLANKVALUE(i.Seat__c,0)};
    ichiroheian[iindex].OwnerKubun = "{!i.OwnerKubun__c}";
    ichiroheian[iindex].InsuranceShuki = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{! i.InsuranceShuki__c}" /></apex:outputText>";
    ichiroheian[iindex].InsurancePlan = "{!i.InsurancePlan__c}";
    ichiroheian[iindex].OI_CompanyName = "{!i.OI_CompanyName__c}";
    ichiroheian[iindex].OI_InsuranceShuki = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{! i.OI_InsuranceShuki__c}" /></apex:outputText>";
    ichiroheian[iindex].VI_CompanyName = "{!i.VI_CompanyName__c}";
    ichiroheian[iindex].VI_InsuranceShuki = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{! i.VI_InsuranceShuki__c}" /></apex:outputText>";
    iindex++;
    </apex:repeat>
    
    <apex:repeat value="{!a.BL}" var="b">
    BL[bindex] = new Object();
    BL[bindex].no = "{!a.Index}";
    BL[bindex].KeiyakuCompanyName = "{!b.KeiyakuCompanyName__r.Name}"; 
  <apex:outputPanel layout="none" rendered="{!isEnglish}" >
    BL[bindex].KeiyakuCompanyName = "{!b.KeiyakuCompanyName__r.CompanyNameEng__c}";
  </apex:outputPanel>           
    BL[bindex].InsurantName = "{!b.Insurant__r.Name}";
    BL[bindex].BranchOfInsurance = "{!b.BranchOfInsurance__c}";
    BL[bindex].InsuranceCompanyName = "{!b.InsuranceCompanyName__c}";
    BL[bindex].InsuranceManki = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{! b.InsuranceManki__c}" /></apex:outputText>";
    bindex++;
    </apex:repeat>

    <apex:repeat value="{!a.Kenshin}" var="k">
    Kenshin[kindex] = new Object();
    Kenshin[kindex].no = "{!a.Index}";
    Kenshin[kindex].KinmuCompanyName = "{!IF(k.MemberFamilyShimei__c!=null , k.MemberFamilyShimei__r.MemberShimei__r.KinmuCompany__r.Name , k.MemberShimei__r.KinmuCompany__r.Name)}";            
  <apex:outputPanel layout="none" rendered="{!isEnglish}" >
    Kenshin[kindex].KinmuCompanyName = "{!IF(k.MemberFamilyShimei__c!=null , k.MemberFamilyShimei__r.MemberShimei__r.KinmuCompany__r.CompanyNameEng__c , k.MemberShimei__r.KinmuCompany__r.CompanyNameEng__c)}"; 
  </apex:outputPanel>     
    Kenshin[kindex].MemberNo = "{!k.MemberNo__c}";
    Kenshin[kindex].MemberShimei = "{!IF(k.MemberFamilyShimei__c!=null , k.MemberFamilyShimei__r.Name , k.MemberShimei__r.Name)}";
  <apex:outputPanel layout="none" rendered="{!isEnglish}" >
    Kenshin[kindex].MemberShimei = "{!IF(k.MemberFamilyShimei__c!=null , k.MemberFamilyShimei__r.SeiMeiRoma__c , k.MemberShimei__r.SeiMeiRoma__c)}";
  </apex:outputPanel>     
    Kenshin[kindex].KenshinArea = "{!k.KenshinArea__c}";
    Kenshin[kindex].KenshinDate = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{! k.KenshinDate__c}" /></apex:outputText>";
    //Kenshin[kindex].KenshinPlan = "{!k.KenshinPlan__c}";
    Kenshin[kindex].KenshinPlan = "{!k.KenshinPlan_new__c}";
    kindex++;
    </apex:repeat>
    
  </apex:repeat>
  
  
/** Excel最大列数 */
var EXCLE_MAX_COLUMN = 256;
/** Excel最大行数 */
var EXCLE_MAX_ROW = 65536;
  
var TODAY = "<apex:outputText value="{0,date,yyyyMMdd}"><apex:param value="{!TODAY()}" /></apex:outputText>";
var TODAYDISP = "<apex:outputText value="{0,date,yyyy-MM-dd}"><apex:param value="{!TODAY()}" /></apex:outputText>";

var detailCnt = 1;
var iCnt = 1;
var bCnt = 1;
var kCnt = 1;
    
function createExcel()
{       
  var selectList = document.getElementById('{!templateSelectListId}');

/*
  var tmpId = selectList.value;
  var tmpName = selectList.options[selectList.selectedIndex].text;
*/

  var tmpId = selectListId;
  var tmpName = "";
  for (i = 0; i < selectList.length; i++) {
      if(selectList.options[i].value==tmpId){
            tmpName = selectList.options[i].text;  
      }
  }
    
  var excel, book, sheet, c;
  try
  {
      //var folder = "c:\\temp";
    var folder = destPath;
    var filename = tmpName+"<apex:outputText value="{0,date,yyyyMMdd}"><apex:param value="{!TODAY()}" /></apex:outputText>_{!contract.KeiyakuCompanyName__r.Name}_{!contract.Name}.xls";
    var tfilename = "TEMP-"+tmpName+".xls";
      
    window.opener.processLog("{!$Label.ExcelGenerating} "+filename+"");      
      
    var path = folder + "\\" + filename;
    var tpath = folder + "\\" + tfilename;
    var objFso = new ActiveXObject("Scripting.FileSystemObject");
    if(!objFso.FolderExists(folder)) 
      objFso.CreateFolder(folder);
    if(objFso.FileExists(path))
      objFso.DeleteFile(path, true);
    if(objFso.FileExists(tpath))
      objFso.DeleteFile(tpath, true);
    if (!getDocumentById(tmpId, folder, tfilename)) return;
    excel = new ActiveXObject("Excel.Application");
    excel.visible = false;
    excel.DisplayAlerts = false;
    book = excel.workbooks.Open(tpath); 
    book.Sheets("{!$Label.RenewalNotice}").Select;     
    //book.Worksheets.Add().Name = "{!$Label.Data}";
    //book.Sheets("{!$Label.Data}").Select;     
    sheet = book.WorkSheets(1);
    setCell(sheet.Cells(1, 3), "{!contract.EigyoTanto__r.Name}"); //Representative (JP)
    setCell(sheet.Cells(2, 3), "{!contract.EigyoTanto__r.SeiMeiRoma__c}"); //Representative (ENG)
    setCell(sheet.Cells(3, 3), "{!contract.KeiyakuArea__c}"); //Contract Place
   <apex:outputPanel rendered="{!IsPersonal}" layout="none">
     setCell(sheet.Cells(4, 3), "Individual"); // Contract Type
   </apex:outputPanel> 
     
    setCell(sheet.Cells(5, 3), "<apex:outputText value="{0,date,yyyy-MM-dd}" ><apex:param value="{!contract.MankiDate__c}" /></apex:outputText>"); // Contract Period - from
    setCell(sheet.Cells(6, 3), "<apex:outputText value="{0,date,yyyy-MM-dd}" ><apex:param value="{!MankiDateN}" /></apex:outputText>"); //Contract Period - to
    setCell(sheet.Cells(7, 3), "{!IF(IsPersonal, member.Name, contract.KeiyakuCompanyName__r.Name)}"); // Company Name (JP)
    setCell(sheet.Cells(8, 3), "{!IF(IsPersonal, member.SeiMeiRoma__c, contract.KeiyakuCompanyName__r.CompanyNameEng__c)}"); // Company Name (Eng)
    setCell(sheet.Cells(9, 3), "'{!IF(IsPersonal, member.Postcd__c, contract.KeiyakuCompanyName__r.OfficePostcd__c)}"); // Address - Postcode
    setCell(sheet.Cells(10, 3), "{!IF(IsPersonal, member.Address__c, contract.KeiyakuCompanyName__r.OfficeAdd__c)}"); // Address
    setCell(sheet.Cells(11, 3), "{!contract.Email__c}"); // Contract email
    setCell(sheet.Cells(12, 3), "{!IF(IsPersonal, '', contract.KeiyakuCompanyName__r.Busho__c)}"); //Person in Charge - Department
    setCell(sheet.Cells(13, 3), "{!IF(IsPersonal, member.Yakushoku__c, contract.KeiyakuCompanyName__r.Yakushoku__c)}"); //Person in Charge - Post
    setCell(sheet.Cells(14, 3), "{!IF(IsPersonal, member.Name, contract.KeiyakuCompanyName__r.Shimei__c)}"); //Person in Charge - Name
    setCell(sheet.Cells(15, 3), "{!IF(IsPersonal, member.Email__c, contract.KeiyakuCompanyName__r.TantoEmail__c)}");// Person in Charge - Email     
    setCell(sheet.Cells(16, 3), "{!contract.KeiyakuCompanyName__r.SubBusho__c}"); // Sub Person in Charge - Department
    setCell(sheet.Cells(17, 3), "{!contract.KeiyakuCompanyName__r.SubYakushoku__c}"); // Sub Person in Charge - Post
    setCell(sheet.Cells(18, 3), "{!contract.KeiyakuCompanyName__r.SubShimei__c}"); // Sub Person in Charge - Name
    setCell(sheet.Cells(19, 3), "{!contract.KeiyakuCompanyName__r.SubTantoEmail__c}");//  Sub Person in Charge - Email
    setCell(sheet.Cells(20, 3), "'{!IF(IsPersonal, member.Tel__c, contract.KeiyakuCompanyName__r.Phone)}"); // Tel
    setCell(sheet.Cells(21, 3), "'{!IF(IsPersonal, member.Fax__c, contract.KeiyakuCompanyName__r.Fax)}"); //Fax
    setCell(sheet.Cells(22, 3), "{!IF(IsPersonal, member.Name, contract.SeikyuCompanyName__r.Name)}"); //Billing - Company Name(JP)
    setCell(sheet.Cells(23, 3), "{!IF(IsPersonal, member.SeiMeiRoma__c, contract.SeikyuCompanyName__r.CompanyNameEng__c)}"); //Billing - Company Name(Eng)
    setCell(sheet.Cells(24, 3), "'{!IF(IsPersonal, member.Postcd__c, contract.SeikyuCompanyName__r.OfficePostcd__c)}"); //Billing - Postcode
    setCell(sheet.Cells(25, 3), "{!IF(IsPersonal, member.Address__c, contract.SeikyuCompanyName__r.OfficeAdd__c)}"); //Billing - Address
    setCell(sheet.Cells(26, 3), "{!IF(IsPersonal, '', contract.SeikyuBusho__c)}"); //Billing Person in Charge - Depertment
    setCell(sheet.Cells(27, 3), "{!IF(IsPersonal, member.Yakushoku__c, contract.SeikyuYakushoku__c)}"); //Billing Person in Charge - Depertment
    setCell(sheet.Cells(28, 3), "{!IF(IsPersonal, member.Name, contract.SeikyuShimei__c)}"); //Billing Person in Charge - Name
    setCell(sheet.Cells(29, 3), "'{!IF(IsPersonal, member.Tel__c, contract.SeikyuTel__c)}"); // Billing - Tel
    setCell(sheet.Cells(30, 3), "'{!IF(IsPersonal, member.Fax__c, contract.SeikyuFax__c)}"); //Billing Fax
         
    setCell(sheet.Cells(31, 3), "{!KeitaiCdMap.S1}");
    setCell(sheet.Cells(32, 3), "{!KeitaiCdMap.F1}");
    setCell(sheet.Cells(33, 3), "{!KeitaiCdMap.M1}");
    setCell(sheet.Cells(34, 3), "{!KeitaiCdMap.S2}");
    setCell(sheet.Cells(35, 3), "{!KeitaiCdMap.F2}");
    setCell(sheet.Cells(36, 3), "{!KeitaiCdMap.M2}");
    setCell(sheet.Cells(37, 3), "{!KeitaiCdMap.S3}");
    setCell(sheet.Cells(38, 3), "{!KeitaiCdMap.F3}");
    setCell(sheet.Cells(39, 3), "{!KeitaiCdMap.M3}");
    setCell(sheet.Cells(40, 3), "{!KeitaiCdMap.S4}");
    setCell(sheet.Cells(41, 3), "{!KeitaiCdMap.F4}");
    setCell(sheet.Cells(42, 3), "{!KeitaiCdMap.M4}");
    setCell(sheet.Cells(43, 3), "{!KeitaiCdMap.S5}");
    setCell(sheet.Cells(44, 3), "{!KeitaiCdMap.F5}");
    setCell(sheet.Cells(45, 3), "{!KeitaiCdMap.M5}"); 
    
    setCell(sheet.Cells(46, 3), "{!KeitaiCdMap.S6}");   
    setCell(sheet.Cells(47, 3), "{!KeitaiCdMap.F6}");
    setCell(sheet.Cells(48, 3), "{!KeitaiCdMap.M6}");    
    setCell(sheet.Cells(49, 3), "{!KeitaiCdMap.S7}");
    setCell(sheet.Cells(50, 3), "{!KeitaiCdMap.F7}");
    setCell(sheet.Cells(51, 3), "{!KeitaiCdMap.M7}");
    setCell(sheet.Cells(52, 3), "{!KeitaiCdMap.S8}");
    setCell(sheet.Cells(53, 3), "{!KeitaiCdMap.F8}");
    setCell(sheet.Cells(54, 3), "{!KeitaiCdMap.M8}");    
    setCell(sheet.Cells(55, 3), "{!KeitaiCdMap.S9}");
    setCell(sheet.Cells(56, 3), "{!KeitaiCdMap.F9}");
    setCell(sheet.Cells(57, 3), "{!KeitaiCdMap.M9}");
    setCell(sheet.Cells(58, 3), "{!KeitaiCdMap.S10}");
    setCell(sheet.Cells(59, 3), "{!KeitaiCdMap.F10}");
    setCell(sheet.Cells(60, 3), "{!KeitaiCdMap.M10}"); 
    setCell(sheet.Cells(61, 3), "{!KeitaiCdMap.S11}");
    setCell(sheet.Cells(62, 3), "{!KeitaiCdMap.F11}");
    setCell(sheet.Cells(63, 3), "{!KeitaiCdMap.M11}");  
    setCell(sheet.Cells(64, 3), "{!KeitaiCdMap.S12}");
    setCell(sheet.Cells(65, 3), "{!KeitaiCdMap.F12}");
    setCell(sheet.Cells(66, 3), "{!KeitaiCdMap.M12}"); 
    setCell(sheet.Cells(67, 3), "{!KeitaiCdMap.S13}");
    setCell(sheet.Cells(68, 3), "{!KeitaiCdMap.F13}");
    setCell(sheet.Cells(69, 3), "{!KeitaiCdMap.M13}");
    setCell(sheet.Cells(70, 3), "{!KeitaiCdMap.S14}");
    setCell(sheet.Cells(71, 3), "{!KeitaiCdMap.F14}");
    setCell(sheet.Cells(72, 3), "{!KeitaiCdMap.M14}");   
    setCell(sheet.Cells(73, 3), "{!KeitaiCdMap.S15}");
    setCell(sheet.Cells(74, 3), "{!KeitaiCdMap.F15}");
    setCell(sheet.Cells(75, 3), "{!KeitaiCdMap.M15}");                                 
                                                                               
    <apex:outputPanel layout="none" rendered="{!(contract.DiscountShubetsu__c!=null)}">
      setCell(sheet.Cells(76, 3), "{!contract.DiscountShubetsu__c}"); //discount type
      setCell(sheet.Cells(77, 3), "{!contract.DiscountPer__c}");//discount rate   
      setCell(sheet.Cells(77, 3), {!IF(OR(contract.DiscountShubetsu__c=='Group‧Corporate', 
      contract.DiscountShubetsu__c=='Group',
      contract.DiscountShubetsu__c=='Corporate',
      contract.DiscountShubetsu__c=='団体',
      contract.DiscountShubetsu__c=='グループ',
      contract.DiscountShubetsu__c=='グループ・団体'),
      BLANKVALUE(contract.KeiyakuCompanyName__r.GroupName__r.GroupWaribikiPer__c,0), 
      BLANKVALUE(contract.DiscountPer__c,0))} / 100); 
    </apex:outputPanel>
    <apex:outputPanel layout="none" rendered="{!(contract.DiscountShubetsu__c==null)}">
      setCell(sheet.Cells(76, 3), ""); //discount type
      setCell(sheet.Cells(77, 3), ""); //discount rate     
      //setCell(sheet.Cells(76, 3), "");
    </apex:outputPanel>
    setCell(sheet.Cells(78, 3), "{!contract.KeiyakuCompanyName__r.TaxIncentives__c}"); //Tax Incentives
    setCell(sheet.Cells(79, 3), "{!contract.KeiyakuCompanyName__r.Tax_Identification_Number__c}"); //Tax_Identification_Number__c  
          // alert('{!$Label.Template}1');
        var tempSheet1 = book.Worksheets("{!$Label.Template}1");
        var tempSheet2 = book.Worksheets("{!$Label.Template}2");

        var sheetName = "{!$Label.Template}2";
        sheet = book.Worksheets(sheetName);     
        detailCnt = 1;
        iCnt = 1;
        bCnt = 1;
        kCnt = 1;
        // 作成日を取得
        for (var i = 1; i < headers.length; i++) {
            // シート追加
            tempSheet1.Copy(null, sheet);  //アクティブシートの後へ追加する
            // 新規シートの取得
            sheet = book.Worksheets(excel.Worksheets.Count);
            // シート名
            sheet.Name = "{!$Label.MembersList}" + i;

            // 作成日の設定
            setCell(sheet.Cells(2, 63), TODAYDISP);

            // ヘッダー情報出力
            sheet = createHeader(sheet, headers[i]);
            // 明細出力
            sheet = createDetail(sheet, members, excel.Worksheets.Count, tempSheet2, TODAYDISP, i, book);
        }
        // テンプレートシートを削除
        tempSheet1.Delete;
        tempSheet2.Delete;
        
        // 最初のシートを選択
        book.Worksheets(2).Select;
        
        // 保存
        book.SaveAs(path, -4143);
        
        if(objFso.FileExists(tpath))
          objFso.DeleteFile(tpath, true);
      
        isSuccess = true;
                                                        
    } catch (e) {

        //alert("{!$Label.ExcelGenerateError}");
        window.opener.alert_error("{!$Label.ExcelGenerateError} "+filename+" ("+e.message+")"); 
        
        btnEnabled();
        
    } finally { 
        try {
            if (sheet != null) {
                sheet = null;
            }
            if (book != null) {
                book.Close();
                book = null;
            }
            if (excel != null) {
                excel.Quit();
                excel = null;
            }
        } catch (e) {
            //alert("{!$Label.ExcelGenerateError}");
            window.opener.alert_error("{!$Label.ExcelGenerateError} "+filename+" ("+e.message+")");            
    
            btnEnabled();          
        }
       
        
        
    }
 
    if(isSuccess != false){
        window.close();
        //window.opener.process_one();
    }else{
        //window.opener.alert_error("{!$Label.ExcelGenerateError} ... "+filename+" ("+e.message+")");
        window.close();
    }

   

    /*
       if(isSuccess != false){
          var aid = findAttachmentByCreatorAndPrefix("{!contract.Id}", tmpName);
          if(aid==''){
            attachFile("{!contract.Id}", path, filename);
            }
          else
            {
            replaceAttachment(aid, path, filename);
            } 
         }
              
        var urlVars = getUrlVars()["Batch"]; 
        var urlId = getUrlVars()["id"];
        
        // If it is the batch process, call back the renewal page 
        if(urlVars!="true" && isSuccess == true){            
            alert("{!$Label.ExcelGenerateCompleted}");
            window.top.location.href = "/{!contract.Id}";
        }
        else{
            if(urlVars == "true"){
                if(isSuccess == true){
                    window.opener.countSuccess();
                }
                else{
                    window.opener.countFail();
                }
                window.close();
            }
        } 
       */
}


function createHeader(sheet, header) {
    var col = 8;
    var col1 = col+12;
    var col2 = col1+12;
    var col3 = col2+10;
    var col4 = col3+10;
    var col5 = col4+10;
    var col6 = col+27;
    var row = 4;
    
    // 契約場所
    setCell(sheet.Cells(row, col), header.KeiyakuArea);
    // WB管轄地区
    setCell(sheet.Cells(row, col6), header.KinmuCompanyJurisdiction);
    // WB所属地区
    setCell(sheet.Cells(++row, col6), header.KinmuCompanyShozokuArea);
    
    // （契約先）会社名称
    setCell(sheet.Cells(++row, col), header.KeiyakuCompanyName);
    // （契約先）住所
    setCell(sheet.Cells(++row, col), header.KeiyakuCompanyAddress);
    // （契約先）TEL
    setCell(sheet.Cells(++row, col), "'" + header.KeiyakuTel);
    // （契約先）FAX
    setCell(sheet.Cells(row, col1), "'" + header.KeiyakuFax);
    row -= 2;
    // （契約先）総経理
    setCell(sheet.Cells(row, col2), header.KeiyakuCompanyPresident);
    // （契約先）担当者
    setCell(sheet.Cells(row, col3), header.KeiyakuShimei);
    // （契約先）部署
    setCell(sheet.Cells(++row, col3), header.KeiyakuBusho);
    // （契約先）役職
    setCell(sheet.Cells(++row, col3), header.KeiyakuYakushoku);
    row -= 2;
    // （契約先）実務担当
    setCell(sheet.Cells(row, col4), header.KeiyakuCompanySubShimei);
    // （契約先）実務担当部署
    setCell(sheet.Cells(++row, col4), header.KeiyakuCompanySubBusho);
    // （契約先）実務担当役職
    setCell(sheet.Cells(++row, col4), header.KeiyakuCompanySubYakushoku);
    row -= 2;
    // （契約先）WB営業担当者
    setCell(sheet.Cells(row, col5), header.KeiyakuEigyoTanto);
    // （契約先）WB内務担当者
    setCell(sheet.Cells(++row, col5), header.KeiyakuNaimuTanto);
    
    row++;
    // （勤務先）会社名称
    setCell(sheet.Cells(++row, col), header.KinmuCompany);
    // （勤務先）住所
    setCell(sheet.Cells(++row, col), header.KinmuCompanyAddress);
    // （勤務先）TEL
    setCell(sheet.Cells(++row, col), "'" + header.KinmuCompanyPhone);
    // （勤務先）FAX
    setCell(sheet.Cells(row, col1), "'" + header.KinmuCompanyFax);
    row -= 2;
    // （勤務先）総経理
    setCell(sheet.Cells(row, col2), header.KinmuCompanyPresident);
    // （勤務先）担当者
    setCell(sheet.Cells(row, col3), header.KinmuCompanyShimei);
    // （勤務先）部署
    setCell(sheet.Cells(++row, col3), header.KinmuCompanyBusho);
    // （勤務先）役職
    setCell(sheet.Cells(++row, col3), header.KinmuCompanyYakushoku);
    row -= 2;
    // （勤務先）実務担当
    setCell(sheet.Cells(row, col4), header.KinmuCompanySubShimei);
    // （勤務先）実務担当部署
    setCell(sheet.Cells(++row, col4), header.KinmuCompanySubBusho);
    // （勤務先）実務担当役職
    setCell(sheet.Cells(++row, col4), header.KinmuCompanySubYakushoku);
    row -= 2;
    // （勤務先）WB営業担当者
    setCell(sheet.Cells(row, col5), header.KinmuCompanyEigyoTanto);
    // （勤務先）WB内務担当者
    setCell(sheet.Cells(++row, col5), header.KinmuCompanyNaimuTanto);

    row++;
    // 請求先
    setCell(sheet.Cells(++row, col), header.SeikyuCompanyName);
    //グループ
    setCell(sheet.Cells(++row, col), header.KeiyakuCompanyAffiliated);
    // 団体名
    setCell(sheet.Cells(row, col6), header.KeiyakuCompanyGroupName);
    
    return sheet;
    
}
/**
 * 明細情報を出力
 * 
 * @param {Object} sheet　WorkSheetオブジェクト
 * @param {Array} detailData　明細データ
 * @param {Object} excel Excelオブジェクト
 * @param {Object} book WorkBookオブジェクト
 */
function createDetail(sheet, detailData, sheetCnt, tempSheet, makeDate, headerNo, book) {    
    var row = 17;
    var pageRow = 37;

    for (var i = detailCnt; i < detailData.length; i++) {

        if (detailData[i].no != headerNo) {
            // detailDataの終了位置を保持
            detailCnt = i;
            break;
        }

        if (row > EXCLE_MAX_ROW) {
            // 最大行数を超えた場合
            book.Worksheets("{!$Label.Template}2").Copy(null, sheet);  //アクティブシートの後へ追加する
            // 新規シートの取得
            sheet = book.Worksheets(++sheetCnt);
            // シート名
            sheet.Name = "{!$Label.MembersList}" + (sheetCnt-1);
            // 行カウンタクリア
            row = 5;
        }
        if (row == pageRow) {
            pageRow += 36;
            // 2ページ目以降の追加
            tempSheet.Rows("1:36").copy;
            sheet.Cells(row, 1).Insert;
            setCell(sheet.Cells(row+1, 62), makeDate);
            row += 4;
        }
        var detail = detailData[i];

        // 会員番号
        setCell(sheet.Cells(row, 1), detail.MemberNo);
        // 会員氏名
        setCell(sheet.Cells(row, 6), detail.Name);
        // 契約形態
        setCell(sheet.Cells(row, 13), detail.ServiceKeitaiCd);
        /*
        
        setCell(sheet.Cells(row, 13), 
            (detail.KeiyakuKeitai.indexOf('{!$Label.Single}')!=-1 ? "S" : 
            (detail.KeiyakuKeitai.indexOf('単身')!=-1 ? "S" :             
            (detail.KeiyakuKeitai.indexOf('{!$Label.Family}')!=-1 ? "F" : 
            (detail.KeiyakuKeitai.indexOf('家族')!=-1 ? "F" : 
            (detail.KeiyakuKeitai.indexOf('{!$Label.UnnamedEmployee}')!=-1 ? "M" :
            (detail.KeiyakuKeitai.indexOf('無記名')!=-1 ? "M" : 
             "" ))));*/
        // 契約満期日
        setCell(sheet.Cells(row, 15), detail.MankiDate);
        // 自宅住所
        setCell(sheet.Cells(row, 19), detail.Address);
        // 自宅TEL
        setCell(sheet.Cells(row, 36), "'" + detail.Tel);
        // 携帯番号
        setCell(sheet.Cells(row, 41), "'" + detail.Mobile);
        // 保険会社
        setCell(sheet.Cells(row, 46), detail.OtaRyaku);
        // プラン
        setCell(sheet.Cells(row, 51), detail.AnshinPlan);
        // 取扱
        setCell(sheet.Cells(row, 52), detail.Toriatsukai=="WB扱い" ? "☆" : "");
        // 保険満期日
        setCell(sheet.Cells(row, 53), detail.OtaInsuranceShuki);
        // 証券入手状況
        //setCell(sheet.Cells(row, 54), detail.ShokenGetSituation=="入手済" ? "○" : "");
        // メールアドレス
        setCell(sheet.Cells(row, 57), detail.Email);
        // 配信
        //setCell(sheet.Cells(row, 65), detail.MailHaishin=="true" ? "○" : "");
        
        // 商品名
        setCell(sheet.Cells(row, 49), detail.InsuranceKind);
        
        row++;
    }
    return sheet;
    
}

function createIchiroheian(sheet, detailData, sheetCnt, tempSheet, makeDate, headerNo, headerName, book) {
    
    var row = 7;
    var pageRow = 37;

    for (var i = iCnt; i < detailData.length; i++) {

        if (detailData[i].no != headerNo) {
            iCnt = i;
            break;
        }

        if (row > EXCLE_MAX_ROW) {
            // 最大行数を超えた場合
            book.Worksheets("{!$Label.Template}3").Copy(null, sheet);  //アクティブシートの後へ追加する
            // 新規シートの取得
            sheet = book.Worksheets(++sheetCnt);
            // シート名
            sheet.Name = "自動車関連" + (sheetCnt-1);
            // 行カウンタクリア
            row = 7;
        }
        if (row == pageRow) {
            pageRow += 36;
            // 2ページ目以降の追加
            tempSheet.Rows("1:36").copy;
            sheet.Cells(row, 1).Insert;
            setCell(sheet.Cells(row+1, 62), makeDate);
            setCell(sheet.Cells(row+2, 9), headerName);
            row += 6;
        }
        var detail = detailData[i];

        // 契約会社名称
        setCell(sheet.Cells(row, 1), detail.KeiyakuCompanyName);
        //登録番号    
        setCell(sheet.Cells(row, 21), detail.Name);
        //座席数
        setCell(sheet.Cells(row, 26), detail.Seat);
        //所有
        setCell(sheet.Cells(row, 29), detail.OwnerKubun);
        //(一路)保険終期
        setCell(sheet.Cells(row, 31), detail.InsuranceShuki);
        //(一路)プラン
        setCell(sheet.Cells(row, 35), detail.InsurancePlan);
        //(強制)保険会社名称
        setCell(sheet.Cells(row, 37), detail.OI_CompanyName);
        //(強制)保険終期
        setCell(sheet.Cells(row, 45), detail.OI_InsuranceShuki);
        //(任意)保険会社名称
        setCell(sheet.Cells(row, 49), detail.VI_CompanyName);
        //(任意)保険終期
        setCell(sheet.Cells(row, 57), detail.VI_InsuranceShuki);
        
        row++;
    }
    return sheet;
    
}

function createBL(sheet, detailData, sheetCnt, tempSheet, makeDate, headerNo, headerName, book) {
    var row = 7;
    var pageRow = 37;

    for (var i = bCnt; i < detailData.length; i++) {

        if (detailData[i].no != headerNo) {
            bCnt = i;
            break;
        }

        if (row > EXCLE_MAX_ROW) {
            // 最大行数を超えた場合
            book.Worksheets("{!$Label.Template}4").Copy(null, sheet);  //アクティブシートの後へ追加する
            // 新規シートの取得
            sheet = book.Worksheets(++sheetCnt);
            // シート名
            sheet.Name = "BL" + (sheetCnt-1);
            // 行カウンタクリア
            row = 7;
        }
        if (row == pageRow) {
            pageRow += 36;
            // 2ページ目以降の追加
            tempSheet.Rows("1:36").copy;
            sheet.Cells(row, 1).Insert;
            setCell(sheet.Cells(row+1, 62), makeDate);
            setCell(sheet.Cells(row+2, 8), headerName);
            row += 6;
        }
        var detail = detailData[i];

        //契約会社名称
        setCell(sheet.Cells(row, 1), detail.KeiyakuCompanyName);
        //契約者（被保険者）
        //setCell(sheet.Cells(row, 1), detail.InsurantName);
        //保険種目   
        setCell(sheet.Cells(row, 21), detail.BranchOfInsurance);
        //保険会社名称
        setCell(sheet.Cells(row, 27), detail.InsuranceCompanyName);
        //保険終期
        setCell(sheet.Cells(row, 35), detail.InsuranceManki);
        
        row++;
    }
    return sheet;
       
}

function createKenshin(sheet, detailData, sheetCnt, tempSheet, makeDate, headerNo, headerName, book) {
    
    var row = 7;
    var pageRow = 37;

    for (var i = kCnt; i < detailData.length; i++) {

        if (detailData[i].no != headerNo) {
            kCnt = i;
            break;
        }

        if (row > EXCLE_MAX_ROW) {
            // 最大行数を超えた場合
            book.Worksheets("{!$Label.Template}5").Copy(null, sheet);  //アクティブシートの後へ追加する
            // 新規シートの取得
            sheet = book.Worksheets(++sheetCnt);
            // シート名
            sheet.Name = "{!$Label.HealthExamination}" + (sheetCnt-1);
            // 行カウンタクリア
            row = 7;
        }
        if (row == pageRow) {
            pageRow += 36;
            // 2ページ目以降の追加
            tempSheet.Rows("1:36").copy;
            sheet.Cells(row, 1).Insert;
            setCell(sheet.Cells(row+1, 62), makeDate);
            setCell(sheet.Cells(row+2, 8), headerName);
            row += 6;
        }
        var detail = detailData[i];

        // 会員番号
        setCell(sheet.Cells(row, 1), detail.MemberNo);
        //会員氏名  
        setCell(sheet.Cells(row, 6), detail.MemberShimei);
        //受診地区
        setCell(sheet.Cells(row, 13), detail.KenshinArea);
        //受診日
        setCell(sheet.Cells(row, 17), detail.KenshinDate);
        //受診プラン
        setCell(sheet.Cells(row, 21), detail.KenshinPlan);
        
        row++;
    }
    return sheet;
            
}



function setCell(cell, data) { 
    cell.Value = data;
}

function findAndReplace(sheet, s1, s2)
{ 
  var c;
  c = sheet.UsedRange.Find(s1);
  while(c!=null)
  {
    c.Value = s2;
    c = sheet.UsedRange.FindNext(c)
  }
}

// find the URL Batch value
function getUrlVars() { 
    var vars = {}; 
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, 
        function(m,key,value) { 
            vars[key] = value; 
        }); 
    return vars; 
} 

</script>

<c:JSAttachment />
<c:JSDocument />


</apex:component>