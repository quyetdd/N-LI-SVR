<apex:component >

<apex:attribute name="account" description="Account Object" type="Account" required="true"/>
<apex:attribute name="data" description="Data" type="CustomerData" required="true"/>
<apex:attribute name="isEnglish" description="English Language" type="Boolean" required="true"/>

<script>
  
  var HERADER_TITLE = new Array(
    "No", 
    //"契約地区",
    "{!$ObjectType.ContractInfo__c.fields.KeiyakuArea__c.Label}", 
    //"WB管轄地区",
    "WB{!$ObjectType.Account.fields.Jurisdiction__c.Label}", 
    //"WB所属地区", //[72]
    "WB{!$ObjectType.Account.fields.ShozokuArea__c.Label}", 
    //"（勤務先）会社名称", 
    "{!$Label.Kinmu}{!$ObjectType.Account.fields.Name.Label}",
    //"{!$Label.Kinmu}住所", 
    "{!$Label.Kinmu}{!$ObjectType.Account.fields.OfficeAdd__c.Label}",
    //"{!$Label.Kinmu}TEL",
    "{!$Label.Kinmu}{!$ObjectType.Account.fields.Phone.Label}",
    //"{!$Label.Kinmu}FAX",
    "{!$Label.Kinmu}{!$ObjectType.Account.fields.Fax.Label}",
    //"{!$Label.Kinmu}総経理",
    "{!$Label.Kinmu}{!$ObjectType.Account.fields.President__c.Label}",
    //"{!$Label.Kinmu}担当者",
    "{!$Label.Kinmu}{!$ObjectType.Account.fields.Shimei__c.Label}",
    //"{!$Label.Kinmu}部署",
    "{!$Label.Kinmu}{!$ObjectType.Account.fields.Busho__c.Label}",
    //"{!$Label.Kinmu}役職",
    "{!$Label.Kinmu}{!$ObjectType.Account.fields.Yakushoku__c.Label}",
    //"{!$Label.Kinmu}実務担当",
    "{!$Label.Kinmu}{!$ObjectType.Account.fields.SubShimei__c.Label}",
    //"{!$Label.Kinmu}実務担当部署",
    "{!$Label.Kinmu}{!$ObjectType.Account.fields.SubBusho__c.Label}",
    //"{!$Label.Kinmu}実務担当役職",
    "{!$Label.Kinmu}{!$ObjectType.Account.fields.SubYakushoku__c.Label}",
    //"{!$Label.Kinmu}WB営業担当者",
    "{!$Label.Kinmu}WB{!$ObjectType.Account.fields.EigyoTanto__c.Label}",
    //"{!$Label.Kinmu}WB内務担当者",
    "{!$Label.Kinmu}WB{!$ObjectType.Account.fields.NaimuTanto__c.Label}",
    //"{!$Label.Keiyaku}会社名称",
    "{!$Label.Keiyaku}{!$ObjectType.Account.fields.Name.Label}",
    //"{!$Label.Keiyaku}住所",
    "{!$Label.Keiyaku}{!$ObjectType.Account.fields.OfficeAdd__c.Label}",
    //"{!$Label.Keiyaku}TEL",
    "{!$Label.Keiyaku}{!$ObjectType.Account.fields.Phone.Label}",
    //"{!$Label.Keiyaku}FAX",
    "{!$Label.Keiyaku}{!$ObjectType.Account.fields.Fax.Label}",
    //"{!$Label.Keiyaku}総経理",
    "{!$Label.Keiyaku}{!$ObjectType.Account.fields.President__c.Label}",
    //"{!$Label.Keiyaku}担当者",
    "{!$Label.Keiyaku}{!$ObjectType.Account.fields.Shimei__c.Label}",
    //"{!$Label.Keiyaku}部署",
    "{!$Label.Keiyaku}{!$ObjectType.Account.fields.Busho__c.Label}",
    //"{!$Label.Keiyaku}役職",
    "{!$Label.Keiyaku}{!$ObjectType.Account.fields.Yakushoku__c.Label}",
    //"{!$Label.Keiyaku}実務担当",
    "{!$Label.Keiyaku}{!$ObjectType.Account.fields.SubShimei__c.Label}",
    //"{!$Label.Keiyaku}実務担当部署",
    "{!$Label.Keiyaku}{!$ObjectType.Account.fields.SubBusho__c.Label}",
    //"{!$Label.Keiyaku}実務担当役職",
    "{!$Label.Keiyaku}{!$ObjectType.Account.fields.SubYakushoku__c.Label}",
    //"{!$Label.Keiyaku}WB営業担当者",
    "{!$Label.Keiyaku}WB{!$ObjectType.Account.fields.EigyoTanto__c.Label}",
    //"{!$Label.Keiyaku}WB内務担当者",
    "{!$Label.Keiyaku}WB{!$ObjectType.Account.fields.NaimuTanto__c.Label}",
    //"請求先会社名称",
    "{!$ObjectType.ContractInfo__c.fields.SeikyuCompanyName__c.Label}",
    //"グループ",
    "{!$ObjectType.Account.fields.AffiliatedCompanyName__c.Label}",
    //"団体名称"
    "{!$ObjectType.Account.fields.GroupName__c.Label}"
    );
    
  var DETAIL_TITLE = new Array(
    "No",
    //"契約先会社名称",
    "{!$Label.Keiyaku}{!$ObjectType.Account.fields.Name.Label}",
    //"勤務先会社名称",
    "{!$Label.Kinmu}{!$ObjectType.Account.fields.Name.Label}",
    //"会員番号",
    "{!$ObjectType.MemberInfo__c.fields.MemberNo__c.Label}",
    //"会員氏名",
    "{!$ObjectType.MemberInfo__c.fields.Name.Label}",
    //"商品",
    "{!$ObjectType.MemberInfo__c.fields.Commodity__c.Label}",
    //"サービス形態コード", //"契約形態",
    "{!$ObjectType.MemberInfo__c.fields.ServiceKeitaiCd__c.Label}",
    //"契約満期日",
    "{!$ObjectType.MemberInfo__c.fields.MankiDate__c.Label}",
    //"自宅住所",
    "{!$ObjectType.MemberInfo__c.fields.Address__c.Label}",
    //"自宅TEL",
    "{!$ObjectType.MemberInfo__c.fields.Tel__c.Label}",
    //"携帯番号",
    "{!$ObjectType.MemberInfo__c.fields.Mobile__c.Label}",
    //"保険会社",
    "{!$ObjectType.MemberInfo__c.fields.OtaName__c.Label}",
    //"商品名", //[73]
    "{!$ObjectType.MemberInfo__c.fields.InsuranceKind__c.Label}",
    //"プラン",
    "{!$ObjectType.MemberInfo__c.fields.InsurancePlan__c.Label}",
    //"取扱",
    "{!$ObjectType.MemberInfo__c.fields.OtaAgency__c.Label}",
    //"保険満期日",
    "{!$ObjectType.MemberInfo__c.fields.OtaInsuranceShuki__c.Label}",
    //"証券入手状況",
    "{!$ObjectType.MemberInfo__c.fields.ShokenGetSituation__c.Label}",
    //"メールアドレス",
    "{!$ObjectType.MemberInfo__c.fields.Email__c.Label}",
    //"配信"
    "{!$ObjectType.MemberInfo__c.fields.MailHaishin__c.Label}"
    );
    
  var Ichiroheian_Title = new Array(
    "No",
    //"契約会社名称",
    "{!$ObjectType.Ichiroheian__c.fields.KeiyakuCompanyName__c.Label}",
    //"使用会社名称",
    "{!$ObjectType.Ichiroheian__c.fields.ShiyoCompanyName__c.Label}",
    //"登録番号",
    "{!$ObjectType.Ichiroheian__c.fields.Name.Label}",
    //"座席数",
    "{!$ObjectType.Ichiroheian__c.fields.Seat__c.Label}",
    //"所有",
    "{!$ObjectType.Ichiroheian__c.fields.OwnerKubun__c.Label}",
    //"(一路)保険終期",
    "{!$ObjectType.Ichiroheian__c.fields.InsuranceShuki__c.Label}",
    //"(一路)プラン",
    "{!$ObjectType.Ichiroheian__c.fields.InsurancePlan__c.Label}",
    //"(強制)保険会社名称",
    "{!$ObjectType.Ichiroheian__c.fields.OI_CompanyName__c.Label}",
    //"(強制)保険終期",
    "{!$ObjectType.Ichiroheian__c.fields.OI_InsuranceShuki__c.Label}",
    //"(任意)保険会社名称",
    "{!$ObjectType.Ichiroheian__c.fields.VI_CompanyName__c.Label}",
    //"(任意)保険終期",
    "{!$ObjectType.Ichiroheian__c.fields.VI_InsuranceShuki__c.Label}",
    //"契約店"
    "{!$ObjectType.Ichiroheian__c.fields.Agency__c.Label}"
    );

  var BL_Title = new Array(
    "No",
    //"契約地区", //[75]
    "{!$ObjectType.BL__c.fields.KeiyakuArea__c.Label}",
    //"契約会社名称",
    "{!$ObjectType.BL__c.fields.KeiyakuCompanyName__c.Label}",
    //"所属地区", //[76]
    "{!$ObjectType.BL__c.fields.ShozokuArea__c.Label}",
    //"契約者（被保険者）",
    "{!$ObjectType.BL__c.fields.Insurant__c.Label}",
    //"保険種目",
    "{!$ObjectType.BL__c.fields.BranchOfInsurance__c.Label}",
    //"保険会社名称",
    "{!$ObjectType.BL__c.fields.InsuranceCompanyName__c.Label}",
    //"保険終期",
    "{!$ObjectType.BL__c.fields.InsuranceManki__c.Label}",
    //"DPアポイント",//[77]
    "{!$ObjectType.BL__c.fields.DPAppoint__c.Label}",
    //"契約店"
    "{!$ObjectType.BL__c.fields.Agency__c.Label}"
    );
    
  var Kenshin_Title = new Array(
    "No",
    //"勤務先会社名称",
    "{!$ObjectType.Kenshin__c.fields.KinmuCompany__c.Label}",
    //"会員番号",
    "{!$ObjectType.Kenshin__c.fields.MemberNo__c.Label}",
    //"会員氏名",
    "{!$ObjectType.Kenshin__c.fields.MemberShimei__c.Label}",
    //"会員区分",
    "{!$ObjectType.MemberInfo__c.fields.MemberKubunB__c.Label}",
    //"（昨年度）受診地区",
    "{!$Label.LastYear}{!$ObjectType.Kenshin__c.fields.KenshinArea__c.Label}",
    //"（昨年度）受診日",
    "{!$Label.LastYear}{!$ObjectType.Kenshin__c.fields.KenshinDate__c.Label}",
    //"（昨年度）受診プラン",
    "{!$Label.LastYear}{!$ObjectType.Kenshin__c.fields.KenshinPlan__c.Label}",
    //"（今年度）受診地区",
    "{!$Label.ThisYear}{!$ObjectType.Kenshin__c.fields.KenshinArea__c.Label}",
    //"（今年度）受診日",
    "{!$Label.ThisYear}{!$ObjectType.Kenshin__c.fields.KenshinDate__c.Label}",
    //"（今年度）受診プラン"
    "{!$Label.ThisYear}{!$ObjectType.Kenshin__c.fields.KenshinPlan__c.Label}"
    );



  
  var headers = new Array();
  var members = new Array();
  var ichiroheian = new Array();
  var BL = new Array();
  var Kenshin = new Array();
  var mindex = 1;
  var iindex = 1;
  var bindex = 1;
  var kindex = 1;


    <apex:repeat value="{!data.data}" var="a">
    headers[{!a.Index}] = new Object();
    <apex:repeat value="{!a.Values}" var="v">
      headers[{!a.Index}].{!v.Name} = "{!v.Value}";
    </apex:repeat>
  
    <apex:repeat value="{!a.Members}" var="m">
    members[mindex] = new Object();
    members[mindex].no = "{!a.Index}";
    members[mindex].KeiyakuCompanyName = "{!m.CompanyKeiyakuNo__r.KeiyakuCompanyName__r.Name}";
    members[mindex].KinmuCompanyName = "{!m.KinmuCompany__r.Name}";
  <apex:outputPanel layout="none" rendered="{!isEnglish}" >
    members[mindex].KeiyakuCompanyName = "{!m.CompanyKeiyakuNo__r.KeiyakuCompanyName__r.CompanyNameEng__c}";
    members[mindex].KinmuCompanyName = "{!m.KinmuCompany__r.CompanyNameEng__c}";
  </apex:outputPanel>    
    members[mindex].MemberNo = "{!m.MemberNo__c}";
    members[mindex].Name = "{!m.Name}";
  <apex:outputPanel layout="none" rendered="{!isEnglish}" >
    members[mindex].Name = "{!m.SeiMeiRoma__c}";
  </apex:outputPanel>    
    //members[mindex].Tanto = "{!IF(m.Tanto__c,'○','')}";
    members[mindex].Commodity = "{!m.Commodity__c}";
    members[mindex].ServiceKeitaiCd = "{!m.ServiceKeitaiCd__c}"; //members[mindex].KeiyakuKeitai = "{!m.KeiyakuKeitai__c}";
    members[mindex].InsuranceKind = "{!m.InsuranceKind__c}"//[73]
    members[mindex].MankiDate = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{!m.MankiDate__c}" /></apex:outputText>";
    members[mindex].Address = "{!JSENCODE(m.Address__c)}";
    members[mindex].Tel = "{!m.Tel__c}";
    members[mindex].Mobile = "{!m.Mobile__c}";
    members[mindex].AnshinPlan = "{!m.InsurancePlan__c}";
    members[mindex].OtaName = "{!m.OtaName__c}";
    members[mindex].Toriatsukai = "{!m.OtaAgency__c}";
    //members[mindex].ShokenNo = "{!m.ShokenNo__c}";
    members[mindex].OtaInsuranceShuki = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{!m.OtaInsuranceShuki__c}" /></apex:outputText>";
    //members[mindex].OtaRyaku = "{!m.OtaRyaku__c}";
    members[mindex].ShokenGetSituation = "{!m.ShokenGetSituation__c}";
    members[mindex].Email = "{!m.Email__c}";
    members[mindex].MailHaishin = "{!m.MailHaishin__c}";
    mindex++;
    
      <apex:repeat value="{!m.FamilyMembers__r}" var="f">
        members[mindex] = new Object();
        members[mindex].no = "{!a.Index}";
        members[mindex].KeiyakuCompanyName = "{!m.CompanyKeiyakuNo__r.KeiyakuCompanyName__r.Name}";
        members[mindex].KinmuCompanyName = "{!m.KinmuCompany__r.Name}";
      <apex:outputPanel layout="none" rendered="{!isEnglish}" >
        members[mindex].KeiyakuCompanyName = "{!m.CompanyKeiyakuNo__r.KeiyakuCompanyName__r.CompanyNameEng__c}";
        members[mindex].KinmuCompanyName = "{!m.KinmuCompany__r.CompanyNameEng__c}";
      </apex:outputPanel>         
        members[mindex].MemberNo = "{!f.MemberNo__c}";
        members[mindex].Name = "  {!f.Name}";
      <apex:outputPanel layout="none" rendered="{!isEnglish}" >
        members[mindex].Name = "  {!f.SeiMeiRoma__c}";
      </apex:outputPanel>    
        members[mindex].Commodity = "{!f.Commodity__c}";
        members[mindex].KeiyakuKeitai = "";
        members[mindex].MankiDate = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{!m.MankiDate__c}" /></apex:outputText>";
        members[mindex].Address = "";
        members[mindex].Tel = "";
        members[mindex].Mobile = "{!f.Mobile__c}";
        members[mindex].AnshinPlan = "{!f.InsurancePlan__c}"; 
        members[mindex].OtaName = "{!f.OtaName__c}";
        members[mindex].Toriatsukai = "{!f.OtaAgency__c}";
        //members[mindex].ShokenNo = "{!f.ShokenNo__c}";
        members[mindex].OtaInsuranceShuki = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{!f.OtaInsuranceShuki__c}" /></apex:outputText>";
        //members[mindex].OtaRyaku = "{!f.OtaRyaku__c}";
        members[mindex].ShokenGetSituation = "{!f.ShokenGetSituation__c}";
        members[mindex].Email = "{!f.Email__c}";
        members[mindex].MailHaishin = "{!f.MailHaishin__c}";
        mindex++;
      </apex:repeat>
    
    </apex:repeat>

    <apex:repeat value="{!a.Ichiroheian}" var="i">
    ichiroheian[iindex] = new Object();
    ichiroheian[iindex].no = "{!a.Index}";
    ichiroheian[iindex].KeiyakuCompanyName = "{!i.KeiyakuCompanyName__r.Name}";
    ichiroheian[iindex].ShiyoCompanyName = "{!i.ShiyoCompanyName__r.Name}";
  <apex:outputPanel layout="none" rendered="{!isEnglish}" >
    ichiroheian[iindex].KeiyakuCompanyName = "{!i.KeiyakuCompanyName__r.CompanyNameEng__c}";
    ichiroheian[iindex].ShiyoCompanyName = "{!i.ShiyoCompanyName__r.CompanyNameEng__c}";  
  </apex:outputPanel>     
    ichiroheian[iindex].Name = "{!i.Name}";
    ichiroheian[iindex].Seat = {!BLANKVALUE(i.Seat__c,0)};
    ichiroheian[iindex].OwnerKubun = "{!i.OwnerKubun__c}";
    ichiroheian[iindex].InsuranceShuki = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{! i.InsuranceShuki__c}" /></apex:outputText>";
    ichiroheian[iindex].InsurancePlan = "{!i.InsurancePlan__c}";
    ichiroheian[iindex].OI_CompanyName = "{!i.OI_CompanyName__c}";
    ichiroheian[iindex].OI_InsuranceShuki = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{! i.OI_InsuranceShuki__c}" /></apex:outputText>";
    ichiroheian[iindex].VI_CompanyName = "{!i.VI_CompanyName__c}";
    ichiroheian[iindex].VI_InsuranceShuki = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{! i.VI_InsuranceShuki__c}" /></apex:outputText>";
    ichiroheian[iindex].agency = "{!i.Agency__c}";
    iindex++;
    </apex:repeat>
    
    <apex:repeat value="{!a.BL}" var="b">
    BL[bindex] = new Object();
    BL[bindex].no = "{!a.Index}";
    BL[bindex].Agency = "{!b.Agency__c}";
    BL[bindex].KeiyakuArea = "{!b.KeiyakuArea__c}";
    BL[bindex].KeiyakuCompanyName = "{!b.KeiyakuCompanyName__r.Name}";
  <apex:outputPanel layout="none" rendered="{!isEnglish}" >
    BL[bindex].KeiyakuCompanyName = "{!b.KeiyakuCompanyName__r.CompanyNameEng__c}";
  </apex:outputPanel>    
    BL[bindex].ShozokuArea = "{!b.ShozokuArea__c}";
    BL[bindex].InsurantName = "{!b.Insurant__r.Name}";
    BL[bindex].BranchOfInsurance = "{!b.BranchOfInsurance__c}";
    BL[bindex].InsuranceCompanyName = "{!b.InsuranceCompanyName__c}";
    BL[bindex].InsuranceManki = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{! b.InsuranceManki__c}" /></apex:outputText>";
    BL[bindex].DPAppoint = "{!b.DPAppoint__c}";
    BL[bindex].Agency = "{!b.Agency__c}";
    bindex++;
    </apex:repeat>

    <apex:repeat value="{!a.KenshinName}" var="k">//Print Kenshin record in this year or (Last Year AND this year)
    Kenshin[kindex] = new Object();
    Kenshin[kindex].no = "{!a.Index}";
    Kenshin[kindex].KinmuCompanyName = "{!BLANKVALUE(k.MemberFamilyShimei__r.MemberShimei__r.KinmuCompany__r.Name , k.MemberShimei__r.KinmuCompany__r.Name)}";
  <apex:outputPanel layout="none" rendered="{!isEnglish}" >
    Kenshin[kindex].KinmuCompanyName = "{!BLANKVALUE(k.MemberFamilyShimei__r.MemberShimei__r.KinmuCompany__r.CompanyNameEng__c, k.MemberShimei__r.KinmuCompany__r.CompanyNameEng__c)}";  
  </apex:outputPanel>      
    Kenshin[kindex].MemberNo = "{!k.MemberNo__c}";
    Kenshin[kindex].MemberShimei = "{!BLANKVALUE(k.MemberFamilyShimei__r.Name , k.MemberShimei__r.Name)}";
  <apex:outputPanel layout="none" rendered="{!isEnglish}" >
    Kenshin[kindex].MemberShimei = "{!BLANKVALUE(k.MemberFamilyShimei__r.SeiMeiRoma__c, k.MemberShimei__r.SeiMeiRoma__c)}";
  </apex:outputPanel>        
    Kenshin[kindex].MemberKubunB = "{!BLANKVALUE(k.MemberShimei__r.MemberKubunB__c,k.MemberFamilyShimei__r.MemberKubunB__c)}";
    //Kenshin[kindex].KenshinArea = "{!k.KenshinArea__c}";
    //Kenshin[kindex].KenshinDate = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{! k.KenshinDate__c}" /></apex:outputText>";
    //Kenshin[kindex].KenshinPlan = "{!k.KenshinPlan_new__c}";
    Kenshin[kindex].KenshinArea = "";
    Kenshin[kindex].KenshinDate = "";
    Kenshin[kindex].KenshinPlan = "";
    Kenshin[kindex].KenshinAreaLY = "";
    Kenshin[kindex].KenshinDateLY = "";
    Kenshin[kindex].KenshinPlanLY = "";
        <apex:repeat value="{!a.KenshinLastYear}" var="k2">
            Kenshin[kindex].KenshinAreaLY = (Kenshin[kindex].KenshinAreaLY == "" ? "{!if(BLANKVALUE(k.MemberFamilyShimei__r.Name , k.MemberShimei__r.Name)==BLANKVALUE(k2.MemberFamilyShimei__r.Name , k2.MemberShimei__r.Name),k2.KenshinArea__c,"")}" : Kenshin[kindex].KenshinAreaLY);
            Kenshin[kindex].KenshinDateLY = (Kenshin[kindex].KenshinDateLY == "" ? "{!if(BLANKVALUE(k.MemberFamilyShimei__r.Name , k.MemberShimei__r.Name)==BLANKVALUE(k2.MemberFamilyShimei__r.Name , k2.MemberShimei__r.Name),"match","")}" : Kenshin[kindex].KenshinDateLY);
            Kenshin[kindex].KenshinPlanLY = (Kenshin[kindex].KenshinPlanLY == "" ? "{!if(BLANKVALUE(k.MemberFamilyShimei__r.Name , k.MemberShimei__r.Name)==BLANKVALUE(k2.MemberFamilyShimei__r.Name , k2.MemberShimei__r.Name),k2.KenshinPlan_new__c,"")}" : Kenshin[kindex].KenshinPlanLY);
            <apex:outputPanel layout="none" rendered="{!isEnglish}" >
                Kenshin[kindex].KenshinAreaLY = (Kenshin[kindex].KenshinAreaLY == "" ? "{!if(BLANKVALUE(k.MemberFamilyShimei__r.SeiMeiRoma__c, k.MemberShimei__r.SeiMeiRoma__c)==BLANKVALUE(k2.MemberFamilyShimei__r.SeiMeiRoma__c, k2.MemberShimei__r.SeiMeiRoma__c),k2.KenshinArea__c,"")}" : Kenshin[kindex].KenshinAreaLY);
                Kenshin[kindex].KenshinDateLY = (Kenshin[kindex].KenshinDateLY == "" ? "{!if(BLANKVALUE(k.MemberFamilyShimei__r.SeiMeiRoma__c, k.MemberShimei__r.SeiMeiRoma__c)==BLANKVALUE(k2.MemberFamilyShimei__r.SeiMeiRoma__c, k2.MemberShimei__r.SeiMeiRoma__c),"match","")}" : Kenshin[kindex].KenshinDateLY);
                Kenshin[kindex].KenshinPlanLY = (Kenshin[kindex].KenshinPlanLY == "" ? "{!if(BLANKVALUE(k.MemberFamilyShimei__r.SeiMeiRoma__c, k.MemberShimei__r.SeiMeiRoma__c)==BLANKVALUE(k2.MemberFamilyShimei__r.SeiMeiRoma__c, k2.MemberShimei__r.SeiMeiRoma__c),k2.KenshinPlan_new__c,"")}" : Kenshin[kindex].KenshinPlanLY);            
            </apex:outputPanel>  
            if(Kenshin[kindex].KenshinDateLY=="match") Kenshin[kindex].KenshinDateLY = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{! k2.KenshinDate__c}" /></apex:outputText>";
        </apex:repeat>
        <apex:repeat value="{!a.Kenshin}" var="k3">
            Kenshin[kindex].KenshinArea = (Kenshin[kindex].KenshinArea == "" ? "{!if(BLANKVALUE(k.MemberFamilyShimei__r.Name , k.MemberShimei__r.Name)==BLANKVALUE(k3.MemberFamilyShimei__r.Name , k3.MemberShimei__r.Name),k3.KenshinArea__c,"")}" : Kenshin[kindex].KenshinArea);
            Kenshin[kindex].KenshinDate = (Kenshin[kindex].KenshinDate == "" ? "{!if(BLANKVALUE(k.MemberFamilyShimei__r.Name , k.MemberShimei__r.Name)==BLANKVALUE(k3.MemberFamilyShimei__r.Name , k3.MemberShimei__r.Name),"match","")}" : Kenshin[kindex].KenshinDate);
            Kenshin[kindex].KenshinPlan = (Kenshin[kindex].KenshinPlan == "" ? "{!if(BLANKVALUE(k.MemberFamilyShimei__r.Name , k.MemberShimei__r.Name)==BLANKVALUE(k3.MemberFamilyShimei__r.Name , k3.MemberShimei__r.Name),k3.KenshinPlan_new__c,"")}" : Kenshin[kindex].KenshinPlan);
            <apex:outputPanel layout="none" rendered="{!isEnglish}" >
                Kenshin[kindex].KenshinArea = (Kenshin[kindex].KenshinArea == "" ? "{!if(BLANKVALUE(k.MemberFamilyShimei__r.SeiMeiRoma__c, k.MemberShimei__r.SeiMeiRoma__c)==BLANKVALUE(k3.MemberFamilyShimei__r.SeiMeiRoma__c, k3.MemberShimei__r.SeiMeiRoma__c),k3.KenshinArea__c,"")}" : Kenshin[kindex].KenshinArea);
                Kenshin[kindex].KenshinDate = (Kenshin[kindex].KenshinDate == "" ? "{!if(BLANKVALUE(k.MemberFamilyShimei__r.SeiMeiRoma__c, k.MemberShimei__r.SeiMeiRoma__c)==BLANKVALUE(k3.MemberFamilyShimei__r.SeiMeiRoma__c, k3.MemberShimei__r.SeiMeiRoma__c),"match","")}" : Kenshin[kindex].KenshinDate);
                Kenshin[kindex].KenshinPlan = (Kenshin[kindex].KenshinPlan == "" ? "{!if(BLANKVALUE(k.MemberFamilyShimei__r.SeiMeiRoma__c, k.MemberShimei__r.SeiMeiRoma__c)==BLANKVALUE(k3.MemberFamilyShimei__r.SeiMeiRoma__c, k3.MemberShimei__r.SeiMeiRoma__c),k3.KenshinPlan_new__c,"")}" : Kenshin[kindex].KenshinPlan);            
            </apex:outputPanel>  
            if(Kenshin[kindex].KenshinDate=="match") Kenshin[kindex].KenshinDate = "<apex:outputText value="{0,date,yyyy/MM/dd}"><apex:param value="{! k3.KenshinDate__c}" /></apex:outputText>";
        </apex:repeat>
    kindex++;
    </apex:repeat>
    
   
    
  </apex:repeat>
  
/** Excel最大列数 */
var EXCLE_MAX_COLUMN = 256;
/** Excel最大行数 */
var EXCLE_MAX_ROW = 65536;
        
function createExcel()
{   

    var tmpName = "{!$Label.MembersListTemplate_Eng}" + "_List_";
    var folder = "c:\\temp";
    var filename = tmpName + "<apex:outputText value="{0,date,yyyyMMdd}"><apex:param value="{!TODAY()}" /></apex:outputText>.xls";
    var tfilename = "TEMP-" + tmpName + ".xls";
    var path = folder + "\\" + filename;
    var tpath = folder + "\\" + tfilename;
    var objFso = new ActiveXObject("Scripting.FileSystemObject");
    if(!objFso.FolderExists(folder)) 
      objFso.CreateFolder(folder);
    if(objFso.FileExists(path))
      objFso.DeleteFile(path, true);
    if(objFso.FileExists(tpath))
      objFso.DeleteFile(tpath, true);
    
    var excel;
    var book;
    var sheet;
    
    try {
        // Excelオブジェクト生成
        excel = new ActiveXObject("Excel.Application");
        // 表示無効
        excel.visible = false;
        // ダイアログ無効
        excel.DisplayAlerts = false;
        // WorkBookを追加
        book = excel.workbooks.Add();
        // シートを１つのみにする
        var sheetCount = excel.Worksheets.Count;
        for (var i = 0; i < sheetCount - 1; i++) {
            book.Sheets(1).Delete;
        }
        // シートを取得
        sheet = book.Worksheets(1);
        // ヘッダータイトル出力
        createHeaderTitle(sheet);
        // ヘッダー情報出力
        sheet = createHeader(sheet, headers, excel, book);
        // シート追加
        book.Sheets.Add(null, sheet, null, null);
        sheet = book.Worksheets(excel.Worksheets.Count);
        // 明細タイトル出力
        createDetailTitle(sheet, DETAIL_TITLE);
        // 明細出力
        sheet = createDetail(sheet, members , excel, book);
        //自動車関連
        book.Sheets.Add(null, sheet, null, null);
        sheet = book.Worksheets(excel.Worksheets.Count);
        createDetailTitle(sheet, Ichiroheian_Title);
        sheet = createIchiroheian(sheet, ichiroheian, excel, book);
        //BL
        book.Sheets.Add(null, sheet, null, null);
        sheet = book.Worksheets(excel.Worksheets.Count);
        createDetailTitle(sheet, BL_Title);
        sheet = createBL(sheet, BL, excel, book);
        //健診
        book.Sheets.Add(null, sheet, null, null);
        sheet = book.Worksheets(excel.Worksheets.Count);
        createDetailTitle(sheet, Kenshin_Title);
        sheet = createKenshin(sheet, Kenshin, excel, book);     
        // 最初のシートを選択
        book.Worksheets(1).Select;
        // 保存
        book.SaveAs(path, -4143); 
    } catch (e) {
        alert("{!$Label.ExcelGenerateError}");
        btnEnabled();
        return;
    } finally {
        try {
            if (sheet != null) {
                sheet = null;
            }
            if (book != null) {
                book.Close();
                book = null;
            }
            if (excel != null) {
                excel.Quit();
                excel = null;
            }
        } catch (e) {
            alert("{!$Label.ExcelGenerateError}");
            btnEnabled();
            return;
        }
    }

    var aid = findAttachmentByCreatorAndPrefix("{!account.Id}", tmpName);

    if(aid=='')
      attachFile("{!account.Id}", path, filename);
    else
      replaceAttachment(aid, path, filename);

    alert("{!$Label.ExcelGenerateCompleted}");
    window.top.location.href = "/{!Account.Id}";
}

/**
 * ヘッダータイトルを出力
 * 
 * @param {Object} sheet　WorkSheetオブジェクト
 */
function createHeaderTitle(sheet) {
    
    for (var i = 0; i < HERADER_TITLE.length; i++) {
        sheet.Cells(i + 1, 1).Value = HERADER_TITLE[i];
    }
}

/**
 * 明細タイトルを出力
 * 
 * @param {Object} sheet　WorkSheetオブジェクト
 */
function createDetailTitle(sheet, titles) {

    for (var i = 0; i < titles.length; i++) {
        sheet.Cells(1, i + 1).Value = titles[i];
    }
    // 中央揃え
    sheet.Range(sheet.Cells(1, 1), sheet.Cells(1, titles.length)).HorizontalAlignment = -4108;
}

/**
 * ヘッダー情報を出力
 * 
 * @param {Object} sheet　WorkSheetオブジェクト
 * @param {Array} headers　ヘッダーデータ
 * @param {Object} excel　Excelオブジェクト
 * @param {Object} book WorkBookオブジェクト
 * @return {Object} WorkSheetオブジェクト
 */
function createHeader(sheet, headers, excel, book) {
    
    var col = 2;
    var row = 1;
    for (var i = 1; i < headers.length; i++) {
        if (col > EXCLE_MAX_COLUMN) {
            // 最大列数を超えた場合
            // 表示形式を文字列
            sheet.Range(sheet.Cells(2, 2), sheet.Cells(23, col - 1)).NumberFormatLocal = "@";
            // Noを中央揃え
            sheet.Range(sheet.Cells(1, 1), sheet.Cells(1, col - 1)).HorizontalAlignment = -4108;
            // フォント設定
            sheet.Cells.Font.Name = "SimSun";
            sheet.Cells.Font.Size = 10;
            // 幅合わせ
            sheet.Cells.EntireColumn.AutoFit;
            // シート名
            sheet.Name = "{!$Label.MDHeader}" + excel.Worksheets.Count;
            // シート追加
            book.Sheets.Add(null, sheet, null, null);
            // シート取得
            sheet = book.Worksheets(excel.Worksheets.Count);
            // タイトル出力
            createHeaderTitle(sheet);
            // 列カウンタクリア
            col = 2;
        }
        var header = headers[i];
        row = 1;
        // No
        setCell(sheet.Cells(row++, col), i);
        // 契約場所
        setCell(sheet.Cells(row++, col), header.KeiyakuArea);
        // WB管轄地区
        setCell(sheet.Cells(row++, col), header.KinmuCompanyJurisdiction);
        // WB所属地区
        setCell(sheet.Cells(row++, col), header.KinmuCompanyShozokuArea); //[72]        
        // （勤務先）会社名称
        setCell(sheet.Cells(row++, col), header.KinmuCompany);
        // （勤務先）住所
        setCell(sheet.Cells(row++, col), header.KinmuCompanyAddress);
        // （勤務先）TEL
        setCell(sheet.Cells(row++, col), "'" + header.KinmuCompanyPhone);
        // （勤務先）FAX
        setCell(sheet.Cells(row++, col), "'" + header.KinmuCompanyFax);
        // （勤務先）総経理
        setCell(sheet.Cells(row++, col), header.KinmuCompanyPresident);
        // （勤務先）担当者
        setCell(sheet.Cells(row++, col), header.KinmuCompanyShimei);
        // （勤務先）部署
        setCell(sheet.Cells(row++, col), header.KinmuCompanyBusho);
        // （勤務先）役職
        setCell(sheet.Cells(row++, col), header.KinmuCompanyYakushoku);
        // （勤務先）実務担当
        setCell(sheet.Cells(row++, col), header.KinmuCompanySubShimei);
        // （勤務先）実務担当部署
        setCell(sheet.Cells(row++, col), header.KinmuCompanySubBusho);
        // （勤務先）実務担当役職
        setCell(sheet.Cells(row++, col), header.KinmuCompanySubYakushoku);
        // （勤務先）WB営業担当者
        setCell(sheet.Cells(row++, col), header.KinmuCompanyEigyoTanto);
        // （勤務先）WB内務担当者
        setCell(sheet.Cells(row++, col), header.KinmuCompanyNaimuTanto);
        // （契約先）会社名称
        setCell(sheet.Cells(row++, col), header.KeiyakuCompanyName);
        // （契約先）住所
        setCell(sheet.Cells(row++, col), header.KeiyakuCompanyAddress);
        // （契約先）TEL
        setCell(sheet.Cells(row++, col), "'" + header.KeiyakuTel);
        // （契約先）FAX
        setCell(sheet.Cells(row++, col), "'" + header.KeiyakuFax);
        // （契約先）総経理
        setCell(sheet.Cells(row++, col), header.KeiyakuCompanyPresident);
        // （契約先）担当者
        setCell(sheet.Cells(row++, col), header.KeiyakuShimei);
        // （契約先）部署
        setCell(sheet.Cells(row++, col), header.KeiyakuBusho);
        // （契約先）役職
        setCell(sheet.Cells(row++, col), header.KeiyakuYakushoku);
        // （契約先）実務担当
        setCell(sheet.Cells(row++, col), header.KeiyakuCompanySubShimei);
        // （契約先）実務担当部署
        setCell(sheet.Cells(row++, col), header.KeiyakuCompanySubBusho);
        // （契約先）実務担当役職
        setCell(sheet.Cells(row++, col), header.KeiyakuCompanySubYakushoku);
        // （契約先）WB営業担当者
        setCell(sheet.Cells(row++, col), header.KeiyakuEigyoTanto);
        // （契約先）WB内務担当者
        setCell(sheet.Cells(row++, col), header.KeiyakuNaimuTanto);
        // 請求先
        setCell(sheet.Cells(row++, col), header.SeikyuCompanyName);
        //グループ
        setCell(sheet.Cells(row++, col), header.KeiyakuCompanyAffiliated);
        // 団体名
        setCell(sheet.Cells(row++, col), header.KeiyakuCompanyGroupName);
        
        col++;
        
    }
    // 表示形式を文字列にする
    sheet.Range(sheet.Cells(2, 2), sheet.Cells(24, col - 1)).NumberFormatLocal = "@"; //sheet.Range(sheet.Cells(2, 2), sheet.Cells(23, col - 1)).NumberFormatLocal = "@";
    // Noを中央揃え
    sheet.Range(sheet.Cells(1, 1), sheet.Cells(1, col - 1)).HorizontalAlignment = -4108;
    // フォント設定
    sheet.Cells.Font.Name = "SimSun";
    sheet.Cells.Font.Size = 10;
    // 幅合わせ
    sheet.Cells.EntireColumn.AutoFit;
    // シート名
    if (excel.Worksheets.Count == 1) {
        sheet.Name = "{!$Label.MDHeader}";
    } else {
        sheet.Name = "{!$Label.MDHeader}" + excel.Worksheets.Count;
    }
    
    return sheet;
    
}
/**
 * 明細情報を出力
 * 
 * @param {Object} sheet　WorkSheetオブジェクト
 * @param {Array} detailData　明細データ
 * @param {Object} excel Excelオブジェクト
 * @param {Object} book WorkBookオブジェクト
 */
function createDetail(sheet, detailData, excel, book) {
    
    var row = 2;
    var col = 1;
    
    // 明細の開始シート番号を保持
    sheetCount = excel.Worksheets.Count;
    
    for (var i = 1; i < detailData.length; i++) {
        if (row > EXCLE_MAX_ROW) {
            // 最大行数を超えた場合
            // フォント設定
            sheet.Cells.Font.Name = "SimSun";
            sheet.Cells.Font.Size = 10;
            // 幅合わせ
            sheet.Cells.EntireColumn.AutoFit;
            // シート名
            sheet.Name = "{!$Label.MDSpecification}" + (excel.Worksheets.Count - sheetCount + 1);
            // シート追加
            book.Sheets.Add(null, sheet, null, null);
            // シート取得
            sheet = book.Worksheets(excel.Worksheets.Count);
            // 明細タイトル出力
            createDetailTitle(sheet);
            // 行カウンタクリア
            row = 2;
        }
        
        var detail = detailData[i];
        col = 1;
        // No
        setCell(sheet.Cells(row, col++), detail.no);
        // 契約先会社名称
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.KeiyakuCompanyName);
        // 勤務先会社名称
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.KinmuCompanyName);
        // 会員番号
        sheet.Cells(row, col).NumberFormatLocal = "@";
        sheet.Cells(row, col).HorizontalAlignment = -4108;
        setCell(sheet.Cells(row, col++), detail.MemberNo);
        // 会員氏名
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.Name);
        // 担当
        //sheet.Cells(row, col).NumberFormatLocal = "@";
        //sheet.Cells(row, col).HorizontalAlignment = -4108;
        //setCell(sheet.Cells(row, col++), detail.Tanto);
        // 商品
        sheet.Cells(row, col).NumberFormatLocal = "@";
        sheet.Cells(row, col).HorizontalAlignment = -4108;
        setCell(sheet.Cells(row, col++), detail.Commodity);
        //サービス形態コード // 契約形態
        sheet.Cells(row, col).NumberFormatLocal = "@";
        sheet.Cells(row, col).HorizontalAlignment = -4108;
        setCell(sheet.Cells(row, col++), detail.ServiceKeitaiCd);
        // 契約満期日
        setCell(sheet.Cells(row, col++), detail.MankiDate);
        // 自宅住所
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.Address);
        // 自宅TEL
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.Tel);
        // 携帯番号
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.Mobile);
        // 保険会社
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.OtaName);
        // [73]
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.InsuranceKind);
        // プラン
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.AnshinPlan);
        // 取り扱い
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.Toriatsukai=="WB扱い" ? "☆" : "");
        // 証券番号
        //sheet.Cells(row, col).NumberFormatLocal = "@";
        //setCell(sheet.Cells(row, col++), detail.ShokenNo);
        // 保険満期日
        setCell(sheet.Cells(row, col++), detail.OtaInsuranceShuki);
        // 証券入手状況
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.ShokenGetSituation=="入手済" ? "○" : "");
        // メールアドレス
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.Email);
        // 配信
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.MailHaishin=="true" ? "○" : "");
        
        row++;
    }
    // フォント設定
    sheet.Cells.Font.Name = "SimSun";
    sheet.Cells.Font.Size = 10;
    // 幅合わせ
    sheet.Cells.EntireColumn.AutoFit;
    // シート名
    if (excel.Worksheets.Count - sheetCount == 0) {
        sheet.Name = "{!$Label.MDSpecification}";
    } else {
        sheet.Name = "{!$Label.MDSpecification}" + (excel.Worksheets.Count - sheetCount + 1);
    }
    
    return sheet;
    
}

function createIchiroheian(sheet, detailData, excel, book) {
    
    var row = 2;
    var col = 1;
    
    sheetCount = excel.Worksheets.Count;

    for (var i = 1; i < detailData.length; i++) {
        if (row > EXCLE_MAX_ROW) {
            // 最大行数を超えた場合
            // フォント設定
            sheet.Cells.Font.Name = "SimSun";
            sheet.Cells.Font.Size = 10;
            // 幅合わせ
            sheet.Cells.EntireColumn.AutoFit;
            // シート名
            sheet.Name = "{!$Label.Automotive}" + (excel.Worksheets.Count - sheetCount + 1);
            // シート追加
            book.Sheets.Add(null, sheet, null, null);
            // シート取得
            sheet = book.Worksheets(excel.Worksheets.Count);
            // 明細タイトル出力
            createTitle(sheet, Ichiroheian_Title);
            // 行カウンタクリア
            row = 2;
        }

        var detail = detailData[i];
        col = 1;
        // No
        setCell(sheet.Cells(row, col++), detail.no);
        // 契約会社名称
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.KeiyakuCompanyName);
        //使用会社名称
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.ShiyoCompanyName);
        //登録番号    
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.Name);
        //座席数
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.Seat);
        //所有
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.OwnerKubun);
        //(一路)保険終期
        setCell(sheet.Cells(row, col++), detail.InsuranceShuki);
        //(一路)プラン
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.InsurancePlan);
        //(強制)保険会社名称
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.OI_CompanyName);
        //(強制)保険終期
        setCell(sheet.Cells(row, col++), detail.OI_InsuranceShuki);
        //(任意)保険会社名称
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.VI_CompanyName);
        //(任意)保険終期
        setCell(sheet.Cells(row, col++), detail.VI_InsuranceShuki);
        //契約店
        setCell(sheet.Cells(row, col++), detail.agency);
        
        row++;
    }
    // フォント設定
    sheet.Cells.Font.Name = "SimSun";
    sheet.Cells.Font.Size = 10;
    // 幅合わせ
    sheet.Cells.EntireColumn.AutoFit;
    // シート名
    if (excel.Worksheets.Count - sheetCount == 0) {
        sheet.Name = "{!$Label.Automotive}";
    } else {
        sheet.Name = "{!$Label.Automotive}" + (excel.Worksheets.Count - sheetCount + 1);
    }
    
    return sheet;
    
}

function createBL(sheet, detailData, excel, book) {
    
    var row = 2;
    var col = 1;
    
    sheetCount = excel.Worksheets.Count;
    
    for (var i = 1; i < detailData.length; i++) {
        if (row > EXCLE_MAX_ROW) {
            // 最大行数を超えた場合
            // フォント設定
            sheet.Cells.Font.Name = "SimSun";
            sheet.Cells.Font.Size = 10;
            // 幅合わせ
            sheet.Cells.EntireColumn.AutoFit;
            // シート名
            sheet.Name = "BL" + (excel.Worksheets.Count - sheetCount + 1);
            // シート追加
            book.Sheets.Add(null, sheet, null, null);
            // シート取得
            sheet = book.Worksheets(excel.Worksheets.Count);
            // 明細タイトル出力
            createTitle(sheet, BL_Title);
            // 行カウンタクリア
            row = 2;
        }
        
        var detail = detailData[i];
        col = 1;
        // No
        setCell(sheet.Cells(row, col++), detail.no);
        //契約店
        //setCell(sheet.Cells(row, col++), detail.Agency);
        //契約地区
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.KeiyakuArea);
        // 契約会社名称
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.KeiyakuCompanyName);
        //所属地区
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.ShozokuArea);
        //契約者（被保険者）
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.InsurantName);
        //保険種目   
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.BranchOfInsurance);
        //保険会社名称
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.InsuranceCompanyName);
        //保険終期
        setCell(sheet.Cells(row, col++), detail.InsuranceManki);
        //DPアポイント
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.DPAppoint=="true" ? "○" : "");
        //契約店
        setCell(sheet.Cells(row, col++), detail.Agency);
        
        row++;
    }
    // フォント設定
    sheet.Cells.Font.Name = "SimSun";
    sheet.Cells.Font.Size = 10;
    // 幅合わせ
    sheet.Cells.EntireColumn.AutoFit;
    // シート名
    if (excel.Worksheets.Count - sheetCount == 0) {
        sheet.Name = "BL";
    } else {
        sheet.Name = "BL" + (excel.Worksheets.Count - sheetCount + 1);
    }
    
    return sheet;
    
}

function createKenshin(sheet, detailData, excel, book) {
    
    var row = 2;
    var col = 1;
    
    sheetCount = excel.Worksheets.Count;
    
    for (var i = 1; i < detailData.length; i++) {
        if (row > EXCLE_MAX_ROW) {
            // 最大行数を超えた場合
            // フォント設定
            sheet.Cells.Font.Name = "SimSun";
            sheet.Cells.Font.Size = 10;
            // 幅合わせ
            sheet.Cells.EntireColumn.AutoFit;
            // シート名
            sheet.Name = "{!$Label.HealthExamination}" + (excel.Worksheets.Count - sheetCount + 1);
            // シート追加
            book.Sheets.Add(null, sheet, null, null);
            // シート取得
            sheet = book.Worksheets(excel.Worksheets.Count);
            // 明細タイトル出力
            createTitle(sheet, Kenshin_Title);
            // 行カウンタクリア
            row = 2;
        }
        
        var detail = detailData[i];
        col = 1;
        // No
        setCell(sheet.Cells(row, col++), detail.no);
        // 勤務先会社名称
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.KinmuCompanyName);
        // 会員番号
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.MemberNo);
        //会員氏名  
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.MemberShimei);
        //会員区分
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.MemberKubunB);
        //（昨年度）受診地区
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.KenshinAreaLY);
        //（昨年度）受診プラン
        setCell(sheet.Cells(row, col++), detail.KenshinDateLY);
        //（昨年度）受診プラン
        sheet.Cells(row, col).NumberFormatLocal = "@";                                          
        setCell(sheet.Cells(row, col++), detail.KenshinPlanLY);
        //（今年度）受診地区
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.KenshinArea);
        //（今年度）受診日
        setCell(sheet.Cells(row, col++), detail.KenshinDate);
        //（今年度）受診プラン
        sheet.Cells(row, col).NumberFormatLocal = "@";
        setCell(sheet.Cells(row, col++), detail.KenshinPlan);
        
        row++;
    }
    // フォント設定
    sheet.Cells.Font.Name = "SimSun";
    sheet.Cells.Font.Size = 10;
    // 幅合わせ
    sheet.Cells.EntireColumn.AutoFit;
    // シート名
    if (excel.Worksheets.Count - sheetCount == 0) {
        sheet.Name = "{!$Label.HealthExamination}";
    } else {
        sheet.Name = "{!$Label.HealthExamination}" + (excel.Worksheets.Count - sheetCount + 1);
    }
    
    return sheet;
    
}



function setCell(cell, data) { 
    cell.Value = data;
}

</script>

<c:JSAttachment />

<script>
  createExcel();
</script>

</apex:component>